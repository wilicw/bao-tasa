From ef2ed087019b8239589f941a35f137117e1a63f0 Mon Sep 17 00:00:00 2001
From: William Chang <wilicw1346@gmail.com>
Date: Fri, 21 Jul 2023 11:46:01 +0800
Subject: [PATCH] feat(rtos): implement gpio interrupt

---
 src/main.c | 290 ++++++++++++++++++++++++++---------------------------
 1 file changed, 145 insertions(+), 145 deletions(-)

diff --git a/src/main.c b/src/main.c
index 99fa9ef..ad7f9a8 100644
--- a/src/main.c
+++ b/src/main.c
@@ -2,22 +2,23 @@
  * FreeRTOS Kernel V10.2.1
  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
  *
- * Permission is hereby granted, free of charge, to any person obtaining a copy of
- * this software and associated documentation files (the "Software"), to deal in
- * the Software without restriction, including without limitation the rights to
- * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
- * the Software, and to permit persons to whom the Software is furnished to do so,
- * subject to the following conditions:
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
  *
- * The above copyright notice and this permission notice shall be included in all
- * copies or substantial portions of the Software.
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
  *
  * http://www.FreeRTOS.org
  * http://aws.amazon.com/freertos
@@ -27,13 +28,13 @@
 
 /* FreeRTOS kernel includes. */
 #include <FreeRTOS.h>
-#include <task.h>
+#include <gpio.h>
+#include <irq.h>
+#include <plat.h>
 #include <stdio.h>
 #include <string.h>
-
+#include <task.h>
 #include <uart.h>
-#include <irq.h>
-#include <plat.h>
 
 /*
  * Prototypes for the standard FreeRTOS callback/hook functions implemented
@@ -46,175 +47,174 @@ void vApplicationTickHook(void);
 
 /*-----------------------------------------------------------*/
 
-void vTask(void *pvParameters)
-{
-    unsigned long counter = 0;
-    unsigned long id = (unsigned long)pvParameters;
-    while (1)
-    {
-        printf("Task%d: %d\n", id, counter++); 
-        vTaskDelay(1000 / portTICK_PERIOD_MS);
-    }
+void vTask(void *pvParameters) {
+  unsigned long counter = 0;
+  unsigned long id = (unsigned long)pvParameters;
+  while (1) {
+    printf("Task%d: %d\n", id, counter++);
+    vTaskDelay(1000 / portTICK_PERIOD_MS);
+  }
 }
 
 #define SHMEM_IRQ_ID (52)
 
-char* const freertos_message = (char*)0x70000000;
-char* const linux_message    = (char*)0x70002000;
+char *const freertos_message = (char *)0x70000000;
+char *const linux_message = (char *)0x70002000;
 const size_t shmem_channel_size = 0x2000;
 
-
 void shmem_update_msg(int irq_count) {
-    sprintf(freertos_message, "freertos has received %d uart interrupts!\n", 
-        irq_count);
+  sprintf(freertos_message, "freertos has received %d uart interrupts!\n",
+          irq_count);
 }
 
-void uart_rx_handler(){
-    static int irq_count = 0;
-    printf("%s %d\n", __func__, ++irq_count);
-    shmem_update_msg(irq_count);
-    uart_clear_rxirq();
-}
+void uart_rx_handler() { uart_clear_rxirq(); }
 
 void shmem_handler() {
-    linux_message[shmem_channel_size-1] = '\0';
-    char* end = strchr(linux_message, '\n');
-    *end = '\0';
-    printf("message from linux: %s\n", linux_message);
+  linux_message[shmem_channel_size - 1] = '\0';
+  char *end = strchr(linux_message, '\n');
+  *end = '\0';
+  printf("message from linux: %s\n", linux_message);
 }
 
 void shmem_init() {
-    memset(freertos_message, 0, shmem_channel_size);
-    memset(linux_message, 0, shmem_channel_size);
-    shmem_update_msg(0);
-    irq_set_handler(SHMEM_IRQ_ID, shmem_handler);
-    irq_set_prio(SHMEM_IRQ_ID, IRQ_MAX_PRIO);
-    irq_enable(SHMEM_IRQ_ID);
+  memset(freertos_message, 0, shmem_channel_size);
+  memset(linux_message, 0, shmem_channel_size);
+  shmem_update_msg(0);
+  irq_set_handler(SHMEM_IRQ_ID, shmem_handler);
+  irq_set_prio(SHMEM_IRQ_ID, IRQ_MAX_PRIO);
+  irq_enable(SHMEM_IRQ_ID);
 }
 
-int main(void){
+#define GPIO_IRQ_ID (148)
+#define GPIO_LED (23)
+#define GPIO_INPUT (24)
+
+void gpio_irq_handler();
+void gpio_irq_init();
 
-    printf("Bao FreeRTOS guest\n");
+static int irq_count = 0;
+void gpio_irq_handler() {
+  gpio_set(GPIO_LED);
+  gpio_clear(GPIO_LED);
+  shmem_update_msg(++irq_count);
+  gpio_clear_detect_status(GPIO_INPUT);
+}
+
+void gpio_irq_init() {
+  gpio_init(GPIO_INPUT, GPIO_INPUT);
+  gpio_set_pull(GPIO_INPUT, GPIO_PULL_UP);
+  gpio_set_edge(GPIO_INPUT, GPIO_EDGE_FALLING);
+  irq_set_handler(GPIO_IRQ_ID, gpio_irq_handler);
+  irq_set_prio(GPIO_IRQ_ID, IRQ_MAX_PRIO);
+  irq_enable(GPIO_IRQ_ID);
+}
 
-    uart_enable_rxirq();
-    irq_set_handler(UART_IRQ_ID, uart_rx_handler);
-    irq_set_prio(UART_IRQ_ID, IRQ_MAX_PRIO);
-    irq_enable(UART_IRQ_ID);    
+int main(void) {
+  printf("Bao FreeRTOS guest\n");
 
-    shmem_init();
+  uart_enable_rxirq();
+  irq_set_handler(UART_IRQ_ID, uart_rx_handler);
+  irq_set_prio(UART_IRQ_ID, IRQ_MAX_PRIO);
+  irq_enable(UART_IRQ_ID);
 
-    xTaskCreate(
-        vTask,
-        "Task1",
-        configMINIMAL_STACK_SIZE,
-        (void *)1,
-        tskIDLE_PRIORITY + 1,
-        NULL);
+  shmem_init();
+  gpio_init(GPIO_LED, GPIO_OUTPUT);
+  gpio_irq_init();
 
-    xTaskCreate(
-        vTask,
-        "Task2",
-        configMINIMAL_STACK_SIZE,
-        (void *)2,
-        tskIDLE_PRIORITY + 1,
-        NULL);
+  xTaskCreate(vTask, "Task1", configMINIMAL_STACK_SIZE, (void *)1,
+              tskIDLE_PRIORITY + 1, NULL);
 
-    vTaskStartScheduler();
+  vTaskStartScheduler();
 }
 /*-----------------------------------------------------------*/
 
-void vApplicationMallocFailedHook(void)
-{
-    /* vApplicationMallocFailedHook() will only be called if
-	configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a hook
-	function that will get called if a call to pvPortMalloc() fails.
-	pvPortMalloc() is called internally by the kernel whenever a task, queue,
-	timer or semaphore is created.  It is also called by various parts of the
-	demo application.  If heap_1.c or heap_2.c are used, then the size of the
-	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
-	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
-	to query the size of free heap space that remains (although it does not
-	provide information on how the remaining heap might be fragmented). */
-    taskDISABLE_INTERRUPTS();
-    for (;;)
-        ;
+void vApplicationMallocFailedHook(void) {
+  /* vApplicationMallocFailedHook() will only be called if
+        configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a
+     hook function that will get called if a call to pvPortMalloc() fails.
+        pvPortMalloc() is called internally by the kernel whenever a task,
+     queue, timer or semaphore is created.  It is also called by various parts
+     of the demo application.  If heap_1.c or heap_2.c are used, then the size
+     of the heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE
+     in FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be
+     used to query the size of free heap space that remains (although it does
+     not provide information on how the remaining heap might be fragmented). */
+  taskDISABLE_INTERRUPTS();
+  for (;;)
+    ;
 }
 /*-----------------------------------------------------------*/
 
-void vApplicationIdleHook(void)
-{
-    /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
-	to 1 in FreeRTOSConfig.h.  It will be called on each iteration of the idle
-	task.  It is essential that code added to this hook function never attempts
-	to block in any way (for example, call xQue     ueReceive() with a block time
-	specified, or call vTaskDelay()).  If the application makes use of the
-	vTaskDelete() API function (as this demo application does) then it is also
-	important that vApplicationIdleHook() is permitted to return to its calling
-	function, because it is the responsibility of the idle task to clean up
-	memory allocated by the kernel to any task that has since been deleted. */
+void vApplicationIdleHook(void) {
+  /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
+        to 1 in FreeRTOSConfig.h.  It will be called on each iteration of the
+     idle task.  It is essential that code added to this hook function never
+     attempts to block in any way (for example, call xQue     ueReceive() with a
+     block time specified, or call vTaskDelay()).  If the application makes use
+     of the vTaskDelete() API function (as this demo application does) then it
+     is also important that vApplicationIdleHook() is permitted to return to its
+     calling function, because it is the responsibility of the idle task to
+     clean up memory allocated by the kernel to any task that has since been
+     deleted. */
 }
 /*-----------------------------------------------------------*/
 
-void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
-{
-    (void)pcTaskName;
-    (void)pxTask;
-
-    /* Run time stack overflow checking is performed if
-	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
-	function is called if a stack overflow is detected. */
-    taskDISABLE_INTERRUPTS();
-    for (;;)
-        ;
+void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName) {
+  (void)pcTaskName;
+  (void)pxTask;
+
+  /* Run time stack overflow checking is performed if
+        configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
+        function is called if a stack overflow is detected. */
+  taskDISABLE_INTERRUPTS();
+  for (;;)
+    ;
 }
 /*-----------------------------------------------------------*/
 
-void vApplicationTickHook(void)
-{
-}
+void vApplicationTickHook(void) {}
 /*-----------------------------------------------------------*/
 
-void vAssertCalled(void)
-{
-    volatile uint32_t ulSetTo1ToExitFunction = 0;
+void vAssertCalled(void) {
+  volatile uint32_t ulSetTo1ToExitFunction = 0;
 
-    taskDISABLE_INTERRUPTS();
-    while (ulSetTo1ToExitFunction != 1)
-    {
-        __asm volatile("NOP");
-    }
+  taskDISABLE_INTERRUPTS();
+  while (ulSetTo1ToExitFunction != 1) {
+    __asm volatile("NOP");
+  }
 }
 /*-----------------------------------------------------------*/
 
 /* This version of vApplicationAssert() is declared as a weak symbol to allow it
 to be overridden by a version implemented within the application that is using
 this BSP. */
-void vApplicationAssert( const char *pcFileName, uint32_t ulLine )
-{
-volatile uint32_t ul = 0;
-volatile const char *pcLocalFileName = pcFileName; /* To prevent pcFileName being optimized away. */
-volatile uint32_t ulLocalLine = ulLine; /* To prevent ulLine being optimized away. */
-
-	/* Prevent compile warnings about the following two variables being set but
-	not referenced.  They are intended for viewing in the debugger. */
-	( void ) pcLocalFileName;
-	( void ) ulLocalLine;
-
-	printf( "Assert failed in file %s, line %lu\r\n", pcLocalFileName, ulLocalLine );
-
-	/* If this function is entered then a call to configASSERT() failed in the
-	FreeRTOS code because of a fatal error.  The pcFileName and ulLine
-	parameters hold the file name and line number in that file of the assert
-	that failed.  Additionally, if using the debugger, the function call stack
-	can be viewed to find which line failed its configASSERT() test.  Finally,
-	the debugger can be used to set ul to a non-zero value, then step out of
-	this function to find where the assert function was entered. */
-	taskENTER_CRITICAL();
-	{
-		while( ul == 0 )
-		{
-			__asm volatile( "NOP" );
-		}
-	}
-	taskEXIT_CRITICAL();
+void vApplicationAssert(const char *pcFileName, uint32_t ulLine) {
+  volatile uint32_t ul = 0;
+  volatile const char *pcLocalFileName =
+      pcFileName; /* To prevent pcFileName being optimized away. */
+  volatile uint32_t ulLocalLine =
+      ulLine; /* To prevent ulLine being optimized away. */
+
+  /* Prevent compile warnings about the following two variables being set but
+        not referenced.  They are intended for viewing in the debugger. */
+  (void)pcLocalFileName;
+  (void)ulLocalLine;
+
+  printf("Assert failed in file %s, line %lu\r\n", pcLocalFileName,
+         ulLocalLine);
+
+  /* If this function is entered then a call to configASSERT() failed in the
+        FreeRTOS code because of a fatal error.  The pcFileName and ulLine
+        parameters hold the file name and line number in that file of the assert
+        that failed.  Additionally, if using the debugger, the function call
+     stack can be viewed to find which line failed its configASSERT() test.
+     Finally, the debugger can be used to set ul to a non-zero value, then step
+     out of this function to find where the assert function was entered. */
+  taskENTER_CRITICAL();
+  {
+    while (ul == 0) {
+      __asm volatile("NOP");
+    }
+  }
+  taskEXIT_CRITICAL();
 }
-- 
2.34.1

